import { StreamableHTTPClientTransport } from 'composiohq-modelcontextprotocol-typescript-sdk/client/streamableHttp';
import { Client } from 'composiohq-modelcontextprotocol-typescript-sdk/client/index';
import { z } from 'zod';
export declare function getSSEClient(sseUrl: string, logStderr: (...args: any[]) => void): Promise<{
    sseClient: Client<{
        method: string;
        params?: {
            [x: string]: unknown;
            _meta?: {
                [x: string]: unknown;
                progressToken?: string | number | undefined;
            } | undefined;
        } | undefined;
    }, {
        method: string;
        params?: {
            [x: string]: unknown;
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        } | undefined;
    }, {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    }>;
    originalRequest: <T extends z.ZodType<object>>(request: {
        method: string;
        params?: {
            [x: string]: unknown;
            _meta?: {
                [x: string]: unknown;
                progressToken?: string | number | undefined;
            } | undefined;
        } | undefined;
    } | import("composiohq-modelcontextprotocol-typescript-sdk/types").ClientRequest, resultSchema: T, options?: import("composiohq-modelcontextprotocol-typescript-sdk/shared/protocol").RequestOptions) => Promise<z.TypeOf<T>>;
    sseTransport: StreamableHTTPClientTransport;
}>;
